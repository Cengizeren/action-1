name: Validate PR

on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  create-labels:
    name: Create the Necessary Labels
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Create labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label create "feature" --color "#0E8A16" --description "new feature for the user, not a new feature for build script" || true
          gh label create "bugfix" --color "#D93F0B" --description "bugfix for the user, not a fix to a build script" || true
          gh label create "chore" --color "#D4C5F9" --description "formatting, devops and ci work; no production code change" || true
          gh label create "refactor" --color "#FBCA04" --description "refactoring production code, eg. renaming a variable " || true
          gh label create "other" --color "#0E8A16" --description "other" || true
  validate-commits-and-branch:
    name: Validate Commits and Branch Name
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Make validate.sh executable
        run: chmod +x ./bin/validate.sh

      - name: Validate Commit Messages and Branch Name
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PR_NUMBER=${{ github.event.pull_request.number }}
          export PR_TARGET_BRANCH=${{ github.event.pull_request.base.ref }}
          ./bin/validate.sh

  label:
    name: Label PRs and Extract Jira IDs
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    needs: [create-labels, validate-commits-and-branch]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "GitHub CLI is authenticated using GH_TOKEN"

      - name: Extract Jira ID
        id: extract-labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all commit messages in the pull request
          echo "Fetching commit messages..."
          gh pr view ${{ github.event.pull_request.number }} --json commits > pr_commits.json
          cat pr_commits.json
          COMMITS=$(jq -r '.commits[].messageHeadline' pr_commits.json)
          echo "Commit messages fetched: $COMMITS"

          if [ -z "$COMMITS" ]; then
            echo "No commit messages found."
            exit 1
          fi

          JIRA_IDS=()
          LABELS=()

          echo "Extracting Jira IDs and processing labels..."

          for COMMIT in $COMMITS; do
            if echo "$COMMIT" | grep -qE '[xX][aA][aA][sS][pP]?-[0-9]+'; then
                NEW_ID=$(echo "$COMMIT" | grep -oE '[xX][aA][aA][sS][pP]?-[0-9]+')
                if [[ ! " ${JIRA_IDS[@]} " =~ " ${NEW_ID} " ]]; then
                   JIRA_IDS+=("$NEW_ID")
                   echo "Found Jira ID: $NEW_ID"
                fi
            fi

            # Set the labels based on the commit message
            if echo "$COMMIT" | grep -q '^feat'; then
              LABELS+=("feature")
              echo "Adding label: feature"
            fi
            if echo "$COMMIT" | grep -q '^bugfix'; then
              LABELS+=("bugfix")
              echo "Adding label: bugfix"
            fi
            if echo "$COMMIT" | grep -q '^refactor'; then
              LABELS+=("refactor")
              echo "Adding label: refactor"
            fi
            if echo "$COMMIT" | grep -q '^doc'; then
              LABELS+=("documentation")
              echo "Adding label: documentation"
            fi
            if echo "$COMMIT" | grep -q '^test'; then
              LABELS+=("test")
              echo "Adding label: test"
            fi
            if echo "$COMMIT" | grep -q '^chore'; then
              LABELS+=("chore")
              echo "Adding label: chore"
            fi

          done

          if [ ${#JIRA_IDS[@]} -eq 0 ]; then
            echo "❌ ERROR: No Jira ID found in commit messages!"
            exit 1
          fi

          if [ ${#LABELS[@]} -eq 0 ]; then
            echo "⚠️ WARNING: No suitable labels were found in commit messages. Adding 'other' label."
            LABELS+=("other")
          fi

          JIRA_IDS_JSON=$(echo '["'${JIRA_IDS[@]}'"]' | sed 's/ /","/g')
          echo "Final Jira IDs: $JIRA_IDS_JSON"
          echo "jira_id=$JIRA_IDS_JSON" >> $GITHUB_ENV



          # Remove duplicate labels and add them to the PR
          UNIQUE_LABELS=($(echo "${LABELS[@]}" | tr ' ' '\n' | sort -u))
          gh pr edit ${{ github.event.pull_request.number }} --add-label "$UNIQUE_LABELS"


          # Convert labels array to JSON
          LABELS_JSON=$(echo '["'${UNIQUE_LABELS[@]}'"]' | sed 's/ /","/g')
          echo "LABELS JSON: $LABELS_JSON"
          echo "labels=$LABELS_JSON" >> $GITHUB_ENV

      - name: Add Jira ID and labels to PR Body
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          JIRA_ID: ${{ env.jira_id }}
          LABELS: ${{ env.labels }}
        run: |

          BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | jq -r '.body')

          if [ -z "$BODY" ] || [ "$BODY" == "null" ]; then
            BODY=""
          fi

          echo "Original BODY: $BODY"

          #Split the PR body into two parts according to '## Description'
          HEADER=$(echo "$BODY" | awk '/## Description/{exit} {print}')
          REMAINING_BODY=$(echo "$BODY" | awk '/## Description/{flag=1} flag')

          NEW_CONTENT=$(echo -e "PR Title: $PR_TITLE\nJira ID: $JIRA_ID\nLabels: $LABELS")

          if [[ "$HEADER" == "$NEW_CONTENT" ]]; then
            echo "Header content is already up to date. Skipping update."
          else
            UPDATED_BODY=$(echo -e "$NEW_CONTENT\n\n$REMAINING_BODY")
            echo "Updating PR #$PR_NUMBER with PR Title $PR_TITLE, Jira IDs $JIRA_ID and labels $LABELS"
            curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
              -d "$(jq -nc --arg body "$UPDATED_BODY" '{body: $body}')"
          fi
      - name: Verify Labels on PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS: ${{ env.labels }}
        run: |
          echo "Verifying labels on PR #${{ github.event.pull_request.number }}"

          # Fetch current labels on the PR
          EXISTING_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name')

          if [ -z "$EXISTING_LABELS" ]; then
             echo "❌ No existing label in the PR"
             exit 1
          fi

          echo "Existing labels: $EXISTING_LABELS"

          # Parse LABELS JSON into an array
          echo "Parsing expected labels..."
          EXPECTED_LABELS=$(echo "$LABELS" | jq -r '.[]')
          if [ -z "$EXPECTED_LABELS" ]; then
            echo "❌ Expected labels are empty or not properly set."
            exit 1
          fi

          echo -e "Expected labels: \n$EXPECTED_LABELS"

          
          # Compare existing labels with expected labels
          MISSING_LABELS=()
          for LABEL in $EXPECTED_LABELS; do
            echo "Checking label: $LABEL"
            if ! echo "$EXISTING_LABELS" | grep -q -w "$LABEL"; then
              MISSING_LABELS+=("$LABEL")
            fi
          done

          # Output results
          if [ ${#MISSING_LABELS[@]} -eq 0 ]; then
            echo "✅ All expected labels are present: $EXPECTED_LABELS"
          else
            echo "❌ Missing labels: ${MISSING_LABELS[*]}"
            exit 1
          fi

  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    #needs: [create-labels, validate-commits-and-branch, label]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "GitHub CLI is authenticated using GH_TOKEN"

      - name: Validate PR Title Format
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Validating PR title format..."

          # Fetch current PR title
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q ".title")

          if [[ ! "$PR_TITLE" =~ ^(feat|bugfix|docs|refactor|test|chore)\([a-zA-Z0-9_-]+\):\ [a-zA-Z].+ ]]; then
            echo -e "ERROR: ❌ PR title does not follow semantic format.
                      Expected format: <type>(<jiraissue>): <subject>
                      Example: feat(XAAS-12345): add new feature
                      Allowed types: feat, bugfix, docs, refactor, test, chore"
            exit 1
          else
            echo "PR title format is valid."
          fi
  validate-pr-body:
    name: Validate PR Message Body
    runs-on: ubuntu-latest
    steps:
      - name: Check the Required Sections of PR Message Body
        uses: actions/github-script@v6
        with:
          script: |
            const requiredSections = {
              '## Description (required)': 'Description section is required and cannot be empty.',
              '## Impact (required)': 'Impact section is required and cannot be empty.',
              '## Tests (required)': 'Tests section is required and cannot be empty.',
            };
            
            // Get the PR body
            const prBody = context.payload.pull_request.body || '';
            
            // Define an array to keep track of missing or incorrectly filled sections
            const missingSections = [];
            
            // Check the required sections
            for (const [section, errorMessage] of Object.entries(requiredSections)) {
              if (
                !prBody.includes(section) || // if the section does not exist
                prBody.split(section)[1].trim().startsWith('<!--') || // If the default HTML message has not been changed
                prBody.split(section)[1].trim() === '' // If the section is completely empty
              ) {
                missingSections.push(errorMessage); // Add the missing sections into the list
              }
            }
            
            // If there are missing sections, return them all as a single message
            if (missingSections.length > 0) {
              core.setFailed(`PR validation failed:\n- ${missingSections.join('\n- ')}`);
            }
