name: Validate PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  validate-commits-and-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Make validate.sh executable
        run: chmod +x ./bin/validate.sh

      - name: Validate Commit Messages and Branch Name
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PR_NUMBER=${{ github.event.pull_request.number }}
          export PR_TARGET_BRANCH=${{ github.event.pull_request.base.ref }}
          ./bin/validate.sh

  label:
    name: Label PRs and Extract Jira IDs
    runs-on: ubuntu-latest
    needs: [validate-commits-and-branch]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "GitHub CLI is authenticated using GH_TOKEN"

      - name: Extract Jira ID and Label PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all commit messages in the pull request
          echo "Fetching commit messages..."
          gh pr view ${{ github.event.pull_request.number }} --json commits > pr_commits.json
          cat pr_commits.json
          COMMITS=$(jq -r '.commits[].messageHeadline' pr_commits.json)
          echo "Commit messages fetched: $COMMITS"

            if [ -z "$COMMITS" ]; then
            echo "No commit messages found."
            exit 1
            fi

            JIRA_IDS=()
            LABELS=()

            echo "Extracting Jira IDs and processing labels..."

            for COMMIT in $COMMITS; do
            if echo "$COMMIT" | grep -qE '[xX][aA][aA][sS][pP]?-[0-9]+'; then
                NEW_ID=$(echo "$COMMIT" | grep -oE '[xX][aA][aA][sS][pP]?-[0-9]+')
                if [[ ! " ${JIRA_IDS[@]} " =~ " ${NEW_ID} " ]]; then
                JIRA_IDS+=("$NEW_ID")
                echo "Found Jira ID: $NEW_ID"
                fi
            fi


            if echo "$COMMIT" | grep -q '^feat'; then
                LABELS+=("feature")
                echo "Adding label: feature"
            fi
            if echo "$COMMIT" | grep -q '^bugfix'; then
                LABELS+=("bugfix")
                echo "Adding label: bugfix"
            fi
            if echo "$COMMIT" | grep -q '^refactor'; then
                LABELS+=("refactor")
                echo "Adding label: refactor"
            fi
            if echo "$COMMIT" | grep -q '^doc'; then
                LABELS+=("documentation")
                echo "Adding label: documentation"
            fi
            if echo "$COMMIT" | grep -q '^test'; then
                LABELS+=("test")
                echo "Adding label: test"
            fi
            if echo "$COMMIT" | grep -q '^chore'; then
                LABELS+=("chore")
                echo "Adding label: chore"
            fi
            done

            if [ ${#JIRA_IDS[@]} -eq 0 ]; then
            echo "No Jira IDs found."
            exit 1
            fi

            UNIQUE_LABELS=($(echo "${LABELS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

            JIRA_IDS_JSON=$(echo '["'${JIRA_IDS[@]}'"]' | sed 's/ /","/g')
            LABELS_JSON=$(echo '["'${UNIQUE_LABELS[@]}'"]' | sed 's/ /","/g')

            echo "Final Jira IDs: $JIRA_IDS_JSON"
            echo "Final Labels JSON: $LABELS_JSON"
          # Use GitHub API to assign labels to pull request
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            -d "$LABELS_JSON"
          if [ "$JIRA_ID" = "" ]; then
            JIRA_ID="N/A"
          fi

          echo "labels=$LABELS_JSON" >> $GITHUB_ENV
          echo "jira_id=$JIRA_IDS_JSON" >> $GITHUB_ENV
      - name: Apply Label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.labels }}

      - name: Add Jira ID and labels to PR Body
        if: env.jira_id != 'N/A'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          JIRA_ID: ${{ env.jira_id }}
          LABELS: ${{ env.labels }}
        run: |

          BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | jq -r '.body')

          if [ -z "$BODY" ] || [ "$BODY" == "null" ]; then
            BODY=""
          fi

          echo "BODY: $BODY"
          NEW_CONTENT=$(echo -e "PR Title: $PR_TITLE\nJira ID: $JIRA_ID\nLabels: $LABELS")
          echo "NEW CONTENT: $NEW_CONTENT"
          # If body has the NEW_CONTENT, do not update the body
          if echo -e "$BODY" | grep -qF "$(echo -e "$NEW_CONTENT")"; then
           echo "Content already exists in PR body. Skipping update."
           exit 0
          fi

          UPDATED_BODY=$(echo -e "$NEW_CONTENT\n\n$BODY")

          echo "Updating PR #$PR_NUMBER with PR Title $PR_TITLE, Jira IDs $JIRA_ID and labels $LABELS"
          echo "test2"
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
            -d "$(jq -nc --arg body "$UPDATED_BODY" '{body: $body}')"
