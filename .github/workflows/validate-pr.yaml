name: Validate PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  create-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Create labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label create "feature" --color "#0E8A16" --description "A new feature" || true
          gh label create "bugfix" --color "#D93F0B" --description "Fixes a bug" || true
          gh label create "chore" --color "#D4C5F9" --description "Routine maintenance tasks" || true
          gh label create "refactor" --color "#FBCA04" --description "Code refactoring" || true
          gh label create "dependencies" --color "#0366D6" --description "Dependency updates" || true

  validate-commits-and-branch:
    runs-on: ubuntu-latest
    needs: [create-labels]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Make validate.sh executable
        run: chmod +x ./bin/validate.sh

      - name: Validate Commit Messages and Branch Name
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PR_NUMBER=${{ github.event.pull_request.number }}
          export PR_TARGET_BRANCH=${{ github.event.pull_request.base.ref }}
          ./bin/validate.sh

  label:
    name: Label PRs and Extract Jira IDs
    runs-on: ubuntu-latest
    needs: [validate-commits-and-branch, create-labels]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "GitHub CLI is authenticated using GH_TOKEN"

      - name: Extract Jira ID
        id: extract-labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all commit messages in the pull request
          echo "Fetching commit messages..."
          gh pr view ${{ github.event.pull_request.number }} --json commits > pr_commits.json
          cat pr_commits.json
          COMMITS=$(jq -r '.commits[].messageHeadline' pr_commits.json)
          echo "Commit messages fetched: $COMMITS"

          if [ -z "$COMMITS" ]; then
            echo "No commit messages found."
            exit 1
          fi

          JIRA_IDS=()

          echo "Extracting Jira IDs and processing labels..."

          for COMMIT in $COMMITS; do
            if echo "$COMMIT" | grep -qE '[xX][aA][aA][sS][pP]?-[0-9]+'; then
                NEW_ID=$(echo "$COMMIT" | grep -oE '[xX][aA][aA][sS][pP]?-[0-9]+')
                if [[ ! " ${JIRA_IDS[@]} " =~ " ${NEW_ID} " ]]; then
                   JIRA_IDS+=("$NEW_ID")
                   echo "Found Jira ID: $NEW_ID"
                fi
            fi
          done

          JIRA_IDS_JSON=$(echo '["'${JIRA_IDS[@]}'"]' | sed 's/ /","/g')
          echo "Final Jira IDs: $JIRA_IDS_JSON"
          echo "jira_id=$JIRA_IDS_JSON" >> $GITHUB_ENV

      - name: Determine Label Type
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          echo "Branch name is: $BRANCH_NAME"

          if [[ $BRANCH_NAME =~ ^feature/ ]]; then
            echo "label=feature" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME =~ ^bugfix/* ]]; then
            echo "label=bugfix" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME =~ ^chore/* ]]; then
            echo "label=chore" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME =~ ^refactor/* ]]; then
            echo "label=refactor" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME =~ ^documentation/* ]]; then
            echo "label=documentation" >> $GITHUB_ENV
          else
            echo "label=other" >> $GITHUB_ENV
          fi

      - name: Add Label to PR
        if: env.label != 'other'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.label }}
        
      - name: Add Jira ID and labels to PR Body
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          JIRA_ID: ${{ env.jira_id }}
          LABEL: ${{ env.label }}
        run: |

          BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | jq -r '.body')

          if [ -z "$BODY" ] || [ "$BODY" == "null" ]; then
            BODY=""
          fi

          echo "BODY: $BODY"
          echo "LABEL: $LABEL"
          NEW_CONTENT=$(echo -e "PR Title: $PR_TITLE\nJira ID: $JIRA_ID\nLabel: $LABEL")
          echo "NEW CONTENT: $NEW_CONTENT"
          # If body has the NEW_CONTENT, do not update the body
          if echo -e "$BODY" | grep -qF "$(echo -e "$NEW_CONTENT")"; then
           echo "Content already exists in PR body. Skipping update."
           exit 0
          fi

          UPDATED_BODY=$(echo -e "$NEW_CONTENT\n\n$BODY")

          echo "Updating PR #$PR_NUMBER with PR Title $PR_TITLE, Jira IDs $JIRA_ID and label $LABEL"
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
            -d "$(jq -nc --arg body "$UPDATED_BODY" '{body: $body}')"

      - name: Verify Labels on PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS: ${{ env.label }}
        run: |
          echo "Verifying labels on PR #${{ github.event.pull_request.number }}"

          # Fetch current labels on the PR
          EXISTING_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name')

          echo "Existing labels: $EXISTING_LABELS"

          if [ -z $EXISTING_LABELS ]; then
             echo "❌ No existing label in the PR"
             exit 1
          else
             # Compare with expected labels
             MISSING_LABELS=()
             #IFS=',' read -ra label_array <<< "$labels"
             #for LABEL in "${label_array[@]}"; do
             #  if ! echo "$EXISTING_LABELS" | grep -q "$LABEL"; then
             #    MISSING_LABELS+=("$LABEL")
             #  fi
             #done
             if ! echo "$EXISTING_LABELS" | grep -q "$LABEL"; then
               MISSING_LABELS+=("$LABEL")
             fi
          fi

          if [ ${#MISSING_LABELS[@]} -eq 0 ]; then
            echo "✅ All expected labels are present: $LABELS_JSON"
          else
            echo "❌ Missing labels: ${MISSING_LABELS[*]}"
            exit 1
          fi

  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    needs: [validate-commits-and-branch, label, create-labels]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "GitHub CLI is authenticated using GH_TOKEN"

      - name: Validate PR Title Format
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Validating PR title format..."

          # Fetch current PR title
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q ".title")

          if [[ ! "$PR_TITLE" =~ ^(feat|bugfix|docs|refactor|test|chore)\([a-zA-Z0-9_-]+\):\ [a-zA-Z].+ ]]; then
            echo -e "ERROR: ❌ PR title does not follow semantic format.
                      Expected format: <type>(<jiraissue>): <subject>
                      Example: feat(XAAS-12345): add new feature
                      Allowed types: feat, bugfix, docs, refactor, test, chore"
            exit 1
          else
            echo "PR title format is valid."
          fi
